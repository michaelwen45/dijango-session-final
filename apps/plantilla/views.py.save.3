
from django.shortcuts import render
from django.http import HttpResponseRedirect,HttpResponse
from django.http import JsonResponse

import os
import sys
import json 
import glob
from conexionmongo import Connection
from .forms import form_usuario


reload(sys)  # Reload does the trick!
sys.setdefaultencoding('UTF8')
#HACIENDO UN SUBPROCESO
archivo_cluster=os.system ("scp cluster_bigdata:lasalida/* /home/estudiante/GrafoconTaller2/DJANGOTaller2-master")
print archivo_cluster
##TERMINANDO EL SUBPROCESO

#def archive (request)
def inicio(request):
    return render(request, 'inicio.html')

def findNodeId(nodeLabel,graph):
    #graph = {"nodes": [], "edges": []}
    nodes = graph["nodes"]
    for n in nodes:
        if n["label"]==nodeLabel:
            return n["id"]
    return -1

def index(request):
    return render(request, "index.html", {})

def grafo(request):
    return render(request, "grafo.html")
array=[]

def taller3(request):
    print "cambios en la vista de taller 3"
    conn = Connection()
    

    if request.method=="POST":
        form = form_usuario(request.POST)
        if form.is_valid():
            algo= form.cleaned_data['usuario']
	    nombre_usuario=algo
            e= conn.db.pertemas.find_one({"user.screen_name":algo})
	    numero_seguidores= e["user"]["followers_count"]
	    amigos=e["user"]["followers_count"]
	    #print e.user.followers_count
    else:
        form = form_usuario()
	numero_seguidores=""

	nombre_usuario=""


    return render(request, "taller3.html",{"form":form, "numero_seguidores":numero_seguidores,"nombre_usuario":nombre_usuario})

def tagcloud(request):
   
    return render(request, "tagcloud.html")


pais=""
def mygraph(request):
    graph = {"nodes": [], "edges": []}
    read_files=['nombre_fecha_lugar_ultimo.txt','nombre_padre_padre_ultimo.txt','titulo_pareja_pareja_ultimo.txt']
    with open("archivo_completo.txt","w") as outfile:
	for f in read_files:
	    with open(f) as infile:
		outfile.write(infile.read())
    #LEYENDO EL ARCHIVO FINAL	
    file = open("archivo_completo.txt")
    pais=request.GET['country']
    b=request.GET['name']
    f_inicio=request.GET['fecha_inicio']
    f_fin=request.GET['fecha_fin']
    node_id=1
    edge_id=1
    for line in file:
        if  line.strip():
            line= line.replace("\r\n", "")
            line1=line.replace(", ",",")
            values= line1.split(",")

            try :
                toLabel= values[2]
                fromLabel= values[0]
                fecha=values[1]
                
            except :
                 toLabel= "a"
                 fromLabel= "a"
                 fecha="a"              
                 
            from_id=findNodeId(fromLabel, graph)
            if (fromLabel==b or (toLabel==pais and (f_inicio <= fecha <= f_fin))): #ESTE HACE EL FILTRO POR PAIS
                if from_id==-1:
                    nodes= graph["nodes"]
                    nodes.append({"id": node_id, "label": fromLabel})
                    from_id=node_id
                    node_id=node_id + 1

                to_id=findNodeId(toLabel, graph)
                if to_id==-1:
                    nodes= graph["nodes"]
                    nodes.append({"id": node_id, "label": toLabel})
                    to_id=node_id
                    node_id=node_id + 1


                e= {"from": from_id, "to":to_id, "label": values[1]}
                graph["edges"].append(e)
                edge_id=edge_id+1
    #print "aqui debe generar el json linea antes de json"
    #return JsonResponse(graph)
    return HttpResponse(json.dumps(graph,ensure_ascii=False).encode("utf8"),content_type="application/json")
